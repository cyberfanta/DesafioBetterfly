Bitácora de programación de la App DesafíoBetterfly

Preparativos:
De la experiencia me queda que en este tipo de desafíos, no se puede perder tiempo en elementos como el análisis de la API o el diseño de la interfaz gráfica, así que en función de ellos preparé algunas cosas antes de iniciar el reto.

Construí el Scaffold del proyecto. Decidí hacerlo en Kotlin, ya que me al dominar Java y Kotlin como lenguajes nativos, ayuda mostrar conocimiento.
Luego decidí construirlo con una arquitectura MVP. Actualmente estoy realizando el Curso de Arquitecturas Android de Platzi y aunque MVVM es la siguiente parte del curso que voy a explorar, la idea de MVP como una alternativa de arquitectura que facilita que el usuario pueda tener una app que responda sin tener delays, me agrada bastante.

Luego para ahorrar tiempo, cree el proyecto en mi GitHub, https://github.com/cyberfanta/DesafioBetterfly. Cree el archivo Readme.md ya que cuando esté en el challenge por la presión personal de cumplir la meta, siempre lo dejo para el final lo que aumenta el chance de ignorarlo y esta vez no quiero que sea así.

A continuación, debía agregarle una licencia de uso. Realmente de este proyecto lo que me interesa es la experiencia de realizarlo y que, si dado el caso alguien decido utilizarlo, por lo menos indiquen que el autor original soy yo. Por lo tanto y reconociendo que me queda un largo camino que explorar en el tema de las licencias, me he decidido por la licencia Apache 2.0, que según lo que me indica GitHub, cumple con lo que estoy buscando.

El correo llegó y visualicé que se trata de hacer una aplicación api rest de un portal dedicado a Rick and Morty. Esto me indicó que mi app debería ser no solo funcional, sino también bonita. Así que antes de iniciar el reto decidí construir una interfaz basada en algunas plantillas que vi por internet para apps móviles. Decidí hacerlo en Figma y el enlace es https://www.figma.com/file/9s73Gyp0Mf1185UyRmKjCs/DesafioBetterfly?node-id=1%3A2 por si desean ver el diseño planificado y elijo Figma por ser colaborativa, de software libre y super simple para hacer diseños de una manera rápida. Y me encanta.

Luego entré al servidor Api de Rick and Morty, y aunque el correo decía que podía usar este o algún otro, nunca había hecho una app para una serie de tv, así que preferí continuar con esta opción. Me parece que es un reto a mi altura. Noto que existen básicamente 3 tipos de datos, personajes (Character), lugares (Location) y los capítulos (Episode). Cada uno de ellos tiene 5 formas de búsquedas: 1.- Sin ninguna variable, se trae los primeros 20 elementos de la estructura de datos. 2.- Con la variable page, se trae 20 elementos pertenecientes a esa página. 3.- Con un número, se trae un elemento detallado. 4.- Con más de un número separado por comas, se trae varios elementos. 5.- Con variables diferentes a page, se trae los 20 elementos filtrados por las variables elegidas, estas variables dependen de la estructura de datos elegida.

Estas búsquedas de la Api las voy a gestionar en al Arquitectura MVP, específicamente en el Presenter.

Android posee un componente llamado el Coregrapher, que se encarga de indicar cuando tu app pierde frames de despliegue de la UI. Si pierdes muchos frames, Android cierra tu app por lenta. Para evitar esto y considerando que mi Presenter depende de la velocidad de la internet del usuario, la misma debe ser un proceso asíncrono por medio de un hilo que se despliega cada vez que se necesite hacer una consulta.

En seguida al montar un diseño en el Figma, me dí cuenta que el color más predominante era el color crema, así que decidí basar mi paleta de colores en el color crema. En el proyecto Android cambie el tema por defecto para que se base en el color crema #FFF7E8C3 y tocó crear el color crema_dark #FFFEDF92.

Al incluir uno de los vectores en el proyecto, me doy cuenta que la exportación de archivos SVG de Figma no es perfecto. Así que me tocó utilizar Adobe Illustrator para arreglar los SVG.

El desafío indica que opcionalmente, si podemos integrar alguna herramienta de Firebase, así que elijo las analíticas para ver como los usuarios utilizan la aplicación y poder realizar análisis de UX para mejorarla en el futuro. La herramienta de performance para ver el tiempo que demora la App en responder.

Junio 1, 2021
2pm Inicio oficial de la programación de la app. Se resolvió un problema con el GitIgnore del Android Studio. El mismo subia información delicada, ahora está protegida.
3pm La primera interfaz ha sido diagramada.
5pm Realicé el diagrama de clases de mi aplicación utilizando draw.io, allí se puede visualizar el plan que tengo para el desarrollo de mi app. Inicio la implementación de las clases en la app.
6pm Antes de hacer las clases, se me ocurrió poner el menú de about con la información del author.
7:30pm Me propongo a hacer la primera corrida de la app para ver el estado actual antes de empezar a implementar el diagrama de clases, después de lidiar con varios problemas en la interfaz y un problema con la imagen de fondo, lo que me obligó a utilizar Adobe Photoshop para resolverlo. Ya la UI base de mi app está full funcional.
9pm Agregue una pequeña animación de cambio de colores cuando presionas un botón en el footer. Cree una rama llamada Presenter para activar la funcionalidad de obtener los datos de los caracteres.
9:30pm La primera clase del presentador, la conexión con el API está desplegada. Sin embargo, es hora de empezar a incorporar mis pruebas unitarias. Incorporo ConnectionToApiTest a la estructura del proyecto para ir probando que todo está en orden.
10:30pm Pruebas unitarias para ConnectionToApi están listas. Toco investigar los header que requiere el servidor para poder funcionar. Procedo ahora a agregar el constructor de objetos ModelFromConnection, para transformar el Json obtenido de la Api en un objeto utilizable en la app.
11:30pm Al construir las pruebas unitarias para el ModelFromConnection, me encuentro que queryes del tipo "https://rickandmortyapi.com/api/character/1,183" no hace match correctamente con el modelo "CharacterMultiple", en virtud de no seguir retrazando el proceso de desarrollo, voy a resolver ese problema para el final. De todas maneras para poder utilizarlo de manera efectiva, tengo que poder generar elementos en la interfaz que me permitan hacer una selección múltiple. Sería muy interesante resolver ese problema. Pero para un desarrollo de 48 horas, no tiene sentido. Continuo y esos tipos de queries los voy a dejar para el final.
11:50pm Después de eliminar los queryes del tipo selección múltiple, todos las pruebas con esa clase pasaron de manera satisfactoria, ya puedo generar cualquier modelo.
12:10am Continuando con el desarrollo, me percato que mi diagrama de clases está desactualizado. Ya con las ideas más claras decido actualizarlo para incorporar los métodos definitivos que están quedando en mi app.
3:20am Termino mi día de trabajo. Dejo pendiente la implementación de LinkedHashMap en Kotlin.

Junio 2,2021
9am Después de un descanzo interrumpido por una emergencia en la oficina, continuo con el desarrollo de mi app.
11am Completo la implementación del LinkedHashMap después de darme cuenta de un error que no habia visto y que es derivado de mi estilo de programación de Java que ya no aplica en Kotlin. Inicio la implementación de mis pruebas unitarias para mi QueryManager.
12pm Las primeras pruebas unitarias con el objeto Character funcionan de maravilla. Ahora a construir el resto de las lecturas.
1pm Completo todas las pruebas unitarias para la clase QueryManager. Tengo ahora los datos Json y sus objetos creados. Ahora toca hacer la lectura de las imagenes.
1:30pm Para completar la lectura de los datos provistos en el Json, el Character tiene un avatar. Para ellos estoy generando una nueva clase llamada BitmapManager para almacenar todos los avatares. Pero por alguna razón que voy a investigar, al utilizar la clase BitmapFactory.decodeStream para obtener los bitmaps, no me permite hacer pruebas con Junit. Queda pendiente investigar como se hacen esta pruebas unitarias. La voy a saltar ya que en otras oprtunidades he utilizado esa clase sin ningún problema.
1:40pm La integración de BitmapManager en el QueryManager está completada.
3:00pm Se incorporó de manera exitosa el proceso asincrono para la obtención de los datos desde la internet, sin embargo, demora en obtener todos los avatares, así que voy a poner esa mejora para el siguiente paso en la lista de mejoras a realizar.
5:15pm Después de algunos pequeños cambios, logro implementar la mejora que dije que iba a hacer luego. Ahora las data se carga y las imagenes se cargan luego conforme se suben de la internet.
9:30pm Completo la construcción del primer RecyclerView. Empiezo con las corridas para ir registrando como queda.
11:30pm Al conectar los RecyclerView con el QueryManager, me di cuenta que se puede simplificar, ya que el servidor API tiene sus búsquedas basadas en 3 endpoints.
1am Ya se despliegan los elementos en el RecyclerView, todavía hay un detalle con las imágenes. Empiezo a diagramar una vista a detalle super simple para cumplir con la meta.
4am Ya la vista a detalle está completa. Sin embargo, aun tengo el problema de la carga de las imágenes. Dejo pendiente para mañana. Al parecer no me va a quedar tiempo para hacer los 3 recyclers view. Ya veremos como se mueve mañana.
5am Me di un último spring nocturno y resolví el problema de la imagen en la vista de detalle. Ahora si hago un commit, para cerrar la noche.

Junio 3,2021
10am La meta del día de hoy es resolver el problema con las imágenes y si termino antes de las 12, estimo al menos una hora para activar los RecyclersView para los capítulos y para las locaciones. Así que estoy con tiempo corto, pero puedo lograrlo.
12:50pm Logré resolver el tema de las imágenes en los recyclersView. El problema era el nombre del widget del cardItem, le había puesto avatar cuando en toda la implementación la llamé image. Esto me ralentizó el desarrollo por varias horas.
6pm Ya tenemos el mínimo producto viable. Ahora podriamos entregar, pero voy a aprovechar para entregar un poco más, con las ideas que tengo en mente.